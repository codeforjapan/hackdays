-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.tags
(
    id uuid NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tags_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tags
    OWNER to postgres;

ALTER TABLE IF EXISTS public.tags
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.tags TO anon;

GRANT ALL ON TABLE public.tags TO authenticated;

GRANT ALL ON TABLE public.tags TO postgres;

GRANT ALL ON TABLE public.tags TO service_role;

CREATE TABLE IF NOT EXISTS public.tagged_projects
(
    id uuid NOT NULL,
    project_id uuid,
    tag_id uuid,
    CONSTRAINT tagged_projects_pkey PRIMARY KEY (id),
    CONSTRAINT tagged_projects_project_id_fkey FOREIGN KEY (project_id)
        REFERENCES public.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT tagged_projects_tag_id_fkey FOREIGN KEY (tag_id)
        REFERENCES public.tags (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tagged_projects
    OWNER to postgres;

ALTER TABLE IF EXISTS public.tagged_projects
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.tagged_projects TO anon;

GRANT ALL ON TABLE public.tagged_projects TO authenticated;

GRANT ALL ON TABLE public.tagged_projects TO postgres;

GRANT ALL ON TABLE public.tagged_projects TO service_role;

CREATE TABLE IF NOT EXISTS public.resistered_projects_for_the_event
(
    id uuid NOT NULL,
    event_id uuid,
    project_id uuid,
    CONSTRAINT resistered_projects_for_the_event_pkey PRIMARY KEY (id),
    CONSTRAINT resistered_projects_for_the_event_event_id_fkey FOREIGN KEY (event_id)
        REFERENCES public.events (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT resistered_projects_for_the_event_project_id_fkey FOREIGN KEY (project_id)
        REFERENCES public.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.resistered_projects_for_the_event
    OWNER to postgres;

ALTER TABLE IF EXISTS public.resistered_projects_for_the_event
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.resistered_projects_for_the_event TO anon;

GRANT ALL ON TABLE public.resistered_projects_for_the_event TO authenticated;

GRANT ALL ON TABLE public.resistered_projects_for_the_event TO postgres;

GRANT ALL ON TABLE public.resistered_projects_for_the_event TO service_role;

CREATE TABLE IF NOT EXISTS public.support_projects
(
    id uuid NOT NULL,
    user_id uuid,
    project_id uuid,
    CONSTRAINT support_projects_pkey PRIMARY KEY (id),
    CONSTRAINT support_projects_project_id_fkey FOREIGN KEY (project_id)
        REFERENCES public.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT support_projects_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.support_projects
    OWNER to postgres;

GRANT ALL ON TABLE public.support_projects TO anon;

GRANT ALL ON TABLE public.support_projects TO authenticated;

GRANT ALL ON TABLE public.support_projects TO postgres;

GRANT ALL ON TABLE public.support_projects TO service_role;

CREATE TABLE IF NOT EXISTS public.organisation
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text COLLATE pg_catalog."default" NOT NULL,
    detail text COLLATE pg_catalog."default" NOT NULL,
    icon_url text COLLATE pg_catalog."default",
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT organisation_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.organisation
    OWNER to postgres;

ALTER TABLE IF EXISTS public.organisation
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.organisation TO anon;

GRANT ALL ON TABLE public.organisation TO authenticated;

GRANT ALL ON TABLE public.organisation TO postgres;

GRANT ALL ON TABLE public.organisation TO service_role;

CREATE TABLE IF NOT EXISTS public.events
(
    id uuid NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    detail text COLLATE pg_catalog."default",
    how_to_join text COLLATE pg_catalog."default",
    start_datetime time without time zone,
    end_datetime time without time zone,
    event_image_url text COLLATE pg_catalog."default",
    CONSTRAINT events_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.events
    OWNER to postgres;

ALTER TABLE IF EXISTS public.events
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.events TO anon;

GRANT ALL ON TABLE public.events TO authenticated;

GRANT ALL ON TABLE public.events TO postgres;

GRANT ALL ON TABLE public.events TO service_role;

CREATE TABLE IF NOT EXISTS public.joined_organisations
(
    id uuid NOT NULL,
    user_id uuid,
    organisation_id uuid,
    CONSTRAINT joined_organisations_pkey PRIMARY KEY (id),
    CONSTRAINT joined_organisations_organisation_id_fkey FOREIGN KEY (organisation_id)
        REFERENCES public.organisation (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT joined_organisations_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.joined_organisations
    OWNER to postgres;

ALTER TABLE IF EXISTS public.joined_organisations
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.joined_organisations TO anon;

GRANT ALL ON TABLE public.joined_organisations TO authenticated;

GRANT ALL ON TABLE public.joined_organisations TO postgres;

GRANT ALL ON TABLE public.joined_organisations TO service_role;

CREATE TABLE IF NOT EXISTS public.activities
(
    id uuid NOT NULL,
    user_id text COLLATE pg_catalog."default",
    project_id uuid,
    headline text COLLATE pg_catalog."default" NOT NULL,
    detail text COLLATE pg_catalog."default" NOT NULL,
    post_time timestamp with time zone DEFAULT now(),
    CONSTRAINT activities_pkey PRIMARY KEY (id),
    CONSTRAINT activities_project_id_fkey FOREIGN KEY (project_id)
        REFERENCES public.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT activities_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (login_user_name) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.activities
    OWNER to postgres;

ALTER TABLE IF EXISTS public.activities
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.activities TO anon;

GRANT ALL ON TABLE public.activities TO authenticated;

GRANT ALL ON TABLE public.activities TO postgres;

GRANT ALL ON TABLE public.activities TO service_role;

CREATE TABLE IF NOT EXISTS public.star_projects
(
    id uuid NOT NULL,
    user_id uuid,
    project_id uuid,
    CONSTRAINT star_projects_pkey PRIMARY KEY (id),
    CONSTRAINT star_projects_project_id_fkey FOREIGN KEY (project_id)
        REFERENCES public.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT star_projects_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.star_projects
    OWNER to postgres;

ALTER TABLE IF EXISTS public.star_projects
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.star_projects TO anon;

GRANT ALL ON TABLE public.star_projects TO authenticated;

GRANT ALL ON TABLE public.star_projects TO postgres;

GRANT ALL ON TABLE public.star_projects TO service_role;

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL,
    login_user_name text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_login_user_name_key UNIQUE (login_user_name)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.users TO anon;

GRANT ALL ON TABLE public.users TO authenticated;

GRANT ALL ON TABLE public.users TO postgres;

GRANT ALL ON TABLE public.users TO service_role;

ALTER TABLE IF EXISTS public.profiles DROP COLUMN IF EXISTS username;

ALTER TABLE IF EXISTS public.profiles DROP COLUMN IF EXISTS avatar_url;

ALTER TABLE IF EXISTS public.profiles DROP COLUMN IF EXISTS website;

ALTER TABLE IF EXISTS public.profiles
    RENAME id TO updated_at;

ALTER TABLE public.profiles
    ALTER COLUMN updated_at TYPE timestamp with time zone ;
ALTER TABLE IF EXISTS public.profiles
    ALTER COLUMN updated_at SET DEFAULT now();

ALTER TABLE IF EXISTS public.profiles
    ALTER COLUMN updated_at DROP NOT NULL;

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN icon_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN login_user_name text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN self_introduction text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN name text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN twitter_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN facebook_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN created_at timestamp with time zone DEFAULT now();

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN deletion_date date;

ALTER TABLE IF EXISTS public.profiles
    ADD CONSTRAINT profiles_login_user_name_fkey FOREIGN KEY (login_user_name)
    REFERENCES public.users (login_user_name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
ALTER TABLE IF EXISTS public.profiles DROP CONSTRAINT IF EXISTS username_length;
